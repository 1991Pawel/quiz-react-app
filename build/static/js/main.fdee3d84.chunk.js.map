{"version":3,"sources":["data.js","components/HistoryOfQuestion/HistoryOfQuestion.js","components/QuestionPanel/QuestionPanel.js","components/ScoreBoard/ScoreBoard.js","components/App.js","index.js"],"names":["questions","question","answers","correct","Wrapper","styled","div","Question","ball","handleColorType","balls","HistoryOfQuestion","questionBank","historyAnswers","HistoryBall","map","index","key","Timer","section","ProgressBar","width","handleWith","ButtonWrapper","DisplayWrapper","QuestionContent","h1","QuestionCounter","QuestionButton","button","QuestionPanel","props","questionTime","questionNumber","currentQuestionIndex","clickQuestionHandler","fn","numberQuestion","answer","value","onClick","ResetQuiz","ScoreContent","ScoreBoard","score","App","state","length","quizStatus","questionClickHandler","clearInterval","timer","checkAnswer","incrementIndexHandler","setState","setInterval","tick","prevState","setTimeout","changeQuizStatus","resetQuiz","this","items","Component","render","document","getElementById"],"mappings":"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","file":"static/js/main.fdee3d84.chunk.js","sourcesContent":["const questions = [\r\n    {\r\n        question: 'What is React',\r\n        answers: [\"JavaScript library\", \"HTML Framework\", \"CSS Framework\", \"SCSS Framework\"],\r\n        correct: \"JavaScript library\"\r\n    },\r\n    {\r\n        question: 'data type in JS is not',\r\n        answers: [\"Null\", \"Boolean\", \"String\", \"isNaN(x)\"],\r\n        correct: \"isNaN(x)\"\r\n    },\r\n    {\r\n        question: 'Random Question',\r\n        answers: [\"Good Answer\", \"Wrong\", \"Wrong\", \"Wrong\"],\r\n        correct: \"Good Answer\"\r\n    },\r\n    {\r\n        question: 'Random Question',\r\n        answers: [\"Good Answer\", \"Wrong\", \"Wrong\", \"Wrong\"],\r\n        correct: \"Good Answer\"\r\n    },\r\n    {\r\n        question: 'Random Question',\r\n        answers: [\"Good Answer\", \"Wrong\", \"Wrong\", \"Wrong\"],\r\n        correct: \"Good Answer\"\r\n    },\r\n];\r\n\r\nexport default questions\r\n\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst Wrapper = styled.div`\r\nmargin: 15px 0;\r\ndisplay: flex;\r\njustify-content: center;\r\n`;\r\n\r\nconst handleColorType = ball => {\r\n    switch (ball) {\r\n        case true:\r\n            return \"background:#42f581;\";\r\n        case false:\r\n            return \"background: #f54e42;\";\r\n        default:\r\n            return \"background: #e6edea\";\r\n    }\r\n};\r\n\r\nconst Question = styled.div`\r\n    height:25px;\r\n    width:25px;\r\n    background-color:grey;\r\n    ${({ balls }) => handleColorType(balls)};\r\n    border-radius:50%;\r\n    margin-right: 5px;\r\n    transition: .3s ease-in;\r\n`;\r\n\r\nconst HistoryOfQuestion = ({ questionBank, historyAnswers }) => {\r\n\r\n\r\n    const HistoryBall = questionBank.map((question, index) => {\r\n        const ball = historyAnswers[index];\r\n        return (<Question key={index} balls={ball} />)\r\n    })\r\n    return (\r\n        <Wrapper >\r\n            {HistoryBall}\r\n        </Wrapper >\r\n    )\r\n}\r\n\r\nexport default HistoryOfQuestion\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport HistoryOfQuestion from '../../components/HistoryOfQuestion/HistoryOfQuestion';\r\n\r\n\r\nconst Timer = styled.div`\r\n    position:absolute;\r\n    padding:2.5rem;\r\n    font-size:2.5rem;\r\n    color:#fff;\r\n    background-color: #5270C4;\r\n    height:60px;\r\n    width:60px;\r\n    display:flex;\r\n    justify-content:center;\r\n    align-items:center;\r\n    border-radius:50%;\r\n`;\r\n\r\nconst Wrapper = styled.section`\r\n    position:relative;\r\n    border:2px solid #5990C4;\r\n    color:#004A7C;\r\n    color:#fff;\r\n  \r\n`;\r\n\r\n\r\nconst handleWith = width => {\r\n    let size = width * 10\r\n    return `width:${size}%`\r\n};\r\n\r\nconst ProgressBar = styled.div`\r\n    position:absolute;\r\n    top:0;\r\n    left:0;\r\n    right:0;\r\n   height:10px;\r\n   ${({ width }) => handleWith(width)};\r\n   background-color: #42F581;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n    padding:20px 0;\r\n    background-color:#f9f9f9;\r\n    \r\n`;\r\n\r\nconst DisplayWrapper = styled.div`\r\n    background-color:#5990C4;\r\n    padding:25px;\r\n`\r\nconst QuestionContent = styled.h1`\r\n    font-size:25px;\r\n    width:100%;\r\n    padding:20px 0;\r\n`;\r\nconst QuestionCounter = styled.div`\r\n    font-size:25px;\r\n`;\r\n\r\nconst QuestionButton = styled.button`\r\n  font-weight:bold;\r\n  font-size: 16px;\r\n  height: 50px;\r\n  width:80%;\r\n  background-color:#eee;\r\n  color:cadetblue;\r\n  margin: 5px 0;\r\n  border: 1px solid #5990C4;\r\n  border-radius:25px;\r\n  color:#004A7C;\r\n  cursor: pointer;\r\n  position:relative;\r\n  transition: .2s ease-in;\r\n  background:transparent;\r\n\r\n  &:hover {\r\n      background-color: #5990C4;\r\n      color:#fff;\r\n  }\r\n\r\n  &:before{\r\n      content:'A';\r\n      position:absolute;\r\n      display:flex;\r\n      justify-content:center;\r\n      align-items:center;\r\n      top:50%;\r\n      left:10px;\r\n      height:30px;\r\n      width:30px;\r\n      transform:translateY(-50%);\r\n      background-color: #5990C4;\r\n      border-radius:50%;\r\n      color:#fff;\r\n      font-size:13px;\r\n\r\n  }\r\n\r\n  &:nth-of-type(2)::before{\r\n      content:'B';\r\n  }\r\n  &:nth-of-type(3)::before {\r\n      content:'C';\r\n\r\n  }\r\n  &:nth-of-type(4)::before{\r\n      content:'D';\r\n  }\r\n  &:hover::before {\r\n      border:1px solid #fff;\r\n  }\r\n`;\r\n\r\nconst QuestionPanel = (props) => {\r\n    const { questionTime, questionNumber, currentQuestionIndex, questionBank, fn: clickQuestionHandler } = props\r\n    const question = questionBank[currentQuestionIndex];\r\n    const numberQuestion = `${currentQuestionIndex + 1} / ${questionNumber}`;\r\n\r\n\r\n    const answers = question.answers.map((answer, index) => {\r\n        return (\r\n            <QuestionButton key={index} value={answer} onClick={() => clickQuestionHandler(answer)}>\r\n                {answer}\r\n            </QuestionButton>\r\n\r\n        )\r\n    })\r\n\r\n\r\n    return (\r\n        <>\r\n            <Wrapper>\r\n                <DisplayWrapper>\r\n                    <Timer>\r\n                        {questionTime}\r\n                    </Timer>\r\n                    <QuestionContent>\r\n                        {question.question}\r\n                    </QuestionContent>\r\n                    <QuestionCounter>\r\n                        {numberQuestion}\r\n                    </QuestionCounter>\r\n                    <ProgressBar width={questionTime}>\r\n                    </ProgressBar>\r\n                    <HistoryOfQuestion {...props} />\r\n                </DisplayWrapper>\r\n                <ButtonWrapper>\r\n                    {answers}\r\n                </ButtonWrapper>\r\n            </Wrapper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default QuestionPanel;","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport HistoryOfQuestion from '../../components/HistoryOfQuestion/HistoryOfQuestion';\r\n\r\nconst ResetQuiz = styled.button`\r\nfont-size:25px;\r\ncolor:#fff;\r\npadding: 5px 15px;\r\nbackground-color:#004A7C;\r\nborder:none;\r\ncursor:pointer;\r\n    &:hover {\r\n    opacity: .5\r\n    }\r\n`;\r\n\r\nconst ScoreContent = styled.h1`\r\nfont-size:25px;\r\ncolor:#fff;\r\npadding: 25px;\r\n\r\n`;\r\n\r\nconst ScoreBoard = ({ props, fn }) => {\r\n\r\n    return (\r\n        <>\r\n            <ScoreContent>\r\n                Your Score : {props.score}\r\n                <HistoryOfQuestion {...props} />\r\n                <ResetQuiz onClick={fn}>Reset</ResetQuiz>\r\n            </ScoreContent>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ScoreBoard;\r\n","import React, { Component } from \"react\";\nimport questions from '../data';\nimport styled from 'styled-components';\nimport QuestionPanel from '../components/QuestionPanel/QuestionPanel';\nimport ScoreBoard from '../components/ScoreBoard/ScoreBoard';\n\n\nconst Wrapper = styled.section`\n  margin-top:40%;\n  text-align: center;\n  box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);\n  min-width:500px;\n`;\n\nclass App extends Component {\n  state = {\n    questionBank: [...questions],\n    currentQuestionIndex: 0,\n    score: 0,\n    historyAnswers: [],\n    questionNumber: [...questions].length,\n    quizStatus: true,\n    questionTime: 10,\n  }\n\n  questionClickHandler = (question) => {\n    clearInterval(this.timer);\n    this.checkAnswer(question);\n    this.incrementIndexHandler();\n    this.setState({\n      questionTime: 10,\n    })\n    if (this.state.questionNumber !== this.state.currentQuestionIndex + 1) {\n      this.timer = setInterval(this.tick, 1000);\n    }\n\n  }\n\n  tick = () => {\n    const { questionTime } = this.state\n    if (questionTime > 0) {\n      this.setState({ questionTime: this.state.questionTime - 1 })\n    } else {\n\n      clearInterval(this.timer);\n      this.timer = setInterval(this.tick, 1000);\n      this.incrementIndexHandler();\n      this.setState({\n        questionTime: 10,\n      })\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.quizStatus) {\n      this.timer = setInterval(this.tick, 1000);\n    }\n\n  }\n\n  checkAnswer = (question) => {\n    const { questionBank, currentQuestionIndex } = this.state;\n    const correct = questionBank[currentQuestionIndex].correct\n    if (question === correct) {\n      this.setState(prevState => ({\n        score: prevState.score + 1,\n        historyAnswers: [...prevState.historyAnswers, true]\n      }));\n    } else {\n      this.setState(prevState => ({\n        historyAnswers: [...prevState.historyAnswers, false]\n      }));\n    }\n  }\n\n  incrementIndexHandler = () => {\n    const { currentQuestionIndex, questionNumber } = this.state;\n    if (currentQuestionIndex + 1 === questionNumber) {\n      this.checkAnswer();\n      setTimeout(() => { this.changeQuizStatus() }, 600);\n      clearInterval(this.timer);\n      return\n    }\n\n    if (this.state.questionTime === 0) {\n      this.setState(prevState => ({\n        currentQuestionIndex: prevState.currentQuestionIndex + 1,\n        historyAnswers: [...prevState.historyAnswers, false],\n      }));\n    } else {\n      this.setState(prevState => ({\n        currentQuestionIndex: prevState.currentQuestionIndex + 1,\n      }));\n    }\n\n  }\n\n  changeQuizStatus = () => {\n    this.setState({\n      quizStatus: false,\n    })\n  }\n\n  resetQuiz = () => {\n    this.setState({\n      questionBank: [...questions],\n      currentQuestionIndex: 0,\n      score: 0,\n      historyAnswers: [],\n      questionNumber: [...questions].length,\n      quizStatus: true,\n      questionTime: 10,\n    })\n    clearInterval(this.timer);\n    this.timer = setInterval(this.tick, 1000);\n  }\n\n  render() {\n    const items = this.state\n\n    return (\n      <>\n        <Wrapper>\n          {this.state.quizStatus ? <QuestionPanel fn={this.questionClickHandler} {...items} /> : <ScoreBoard props={this.state} fn={this.resetQuiz} />}\n        </Wrapper >\n      </>\n    );\n  }\n\n};\n\n\n\n\nexport default App;\n","import React from 'react';\nimport {render} from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nrender(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}